{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (username, email, password) => dispatch => {\n  return AuthService.register(username, email, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: {\n          username\n        }\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","username","email","password","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","logout"],"sources":["d:/Documents/manga-reader-app/manga-reader-frontend/src/actions/auth.js"],"sourcesContent":["import {\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT,\r\n    SET_MESSAGE,\r\n  } from \"./types\";\r\n  import AuthService from \"../services/auth.service\";\r\n  export const register = (username, email, password) => (dispatch) => {\r\n    return AuthService.register(username, email, password).then(\r\n      (response) => {\r\n        dispatch({\r\n          type: REGISTER_SUCCESS,\r\n        });\r\n        dispatch({\r\n          type: SET_MESSAGE,\r\n          payload: response.data.message,\r\n        });\r\n        return Promise.resolve();\r\n      },\r\n      (error) => {\r\n        const message =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n        dispatch({\r\n          type: REGISTER_FAIL,\r\n        });\r\n        dispatch({\r\n          type: SET_MESSAGE,\r\n          payload: message,\r\n        });\r\n        return Promise.reject();\r\n      }\r\n    );\r\n  };\r\n  export const login = (username, password) => (dispatch) => {\r\n    return AuthService.login(username, password).then(\r\n      (data) => {\r\n        dispatch({\r\n          type: LOGIN_SUCCESS,\r\n          payload: { user: {username, } },\r\n        });\r\n        return Promise.resolve();\r\n      },\r\n      (error) => {\r\n        const message =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n        dispatch({\r\n          type: LOGIN_FAIL,\r\n        });\r\n        dispatch({\r\n          type: SET_MESSAGE,\r\n          payload: message,\r\n        });\r\n        return Promise.reject();\r\n      }\r\n    );\r\n  };\r\n  export const logout = () => (dispatch) => {\r\n    AuthService.logout();\r\n    dispatch({\r\n      type: LOGOUT,\r\n    });\r\n  };\r\n  "],"mappings":"AAAA,SACIA,gBADJ,EAEIC,aAFJ,EAGIC,aAHJ,EAIIC,UAJJ,EAKIC,MALJ,EAMIC,WANJ,QAOS,SAPT;AAQE,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,EAAkBC,QAAlB,KAAgCC,QAAD,IAAc;EACnE,OAAOL,WAAW,CAACC,QAAZ,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsCC,QAAtC,EAAgDE,IAAhD,CACJC,QAAD,IAAc;IACZF,QAAQ,CAAC;MACPG,IAAI,EAAEd;IADC,CAAD,CAAR;IAGAW,QAAQ,CAAC;MACPG,IAAI,EAAET,WADC;MAEPU,OAAO,EAAEF,QAAQ,CAACG,IAAT,CAAcC;IAFhB,CAAD,CAAR;IAIA,OAAOC,OAAO,CAACC,OAAR,EAAP;EACD,CAVI,EAWJC,KAAD,IAAW;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;IAMAV,QAAQ,CAAC;MACPG,IAAI,EAAEb;IADC,CAAD,CAAR;IAGAU,QAAQ,CAAC;MACPG,IAAI,EAAET,WADC;MAEPU,OAAO,EAAEE;IAFF,CAAD,CAAR;IAIA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACD,CA1BI,CAAP;AA4BD,CA7BM;AA8BP,OAAO,MAAMC,KAAK,GAAG,CAACf,QAAD,EAAWE,QAAX,KAAyBC,QAAD,IAAc;EACzD,OAAOL,WAAW,CAACiB,KAAZ,CAAkBf,QAAlB,EAA4BE,QAA5B,EAAsCE,IAAtC,CACJI,IAAD,IAAU;IACRL,QAAQ,CAAC;MACPG,IAAI,EAAEZ,aADC;MAEPa,OAAO,EAAE;QAAES,IAAI,EAAE;UAAChB;QAAD;MAAR;IAFF,CAAD,CAAR;IAIA,OAAOU,OAAO,CAACC,OAAR,EAAP;EACD,CAPI,EAQJC,KAAD,IAAW;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAN,IACCO,KAAK,CAACP,QAAN,CAAeG,IADhB,IAECI,KAAK,CAACP,QAAN,CAAeG,IAAf,CAAoBC,OAFtB,IAGAG,KAAK,CAACH,OAHN,IAIAG,KAAK,CAACC,QAAN,EALF;IAMAV,QAAQ,CAAC;MACPG,IAAI,EAAEX;IADC,CAAD,CAAR;IAGAQ,QAAQ,CAAC;MACPG,IAAI,EAAET,WADC;MAEPU,OAAO,EAAEE;IAFF,CAAD,CAAR;IAIA,OAAOC,OAAO,CAACI,MAAR,EAAP;EACD,CAvBI,CAAP;AAyBD,CA1BM;AA2BP,OAAO,MAAMG,MAAM,GAAG,MAAOd,QAAD,IAAc;EACxCL,WAAW,CAACmB,MAAZ;EACAd,QAAQ,CAAC;IACPG,IAAI,EAAEV;EADC,CAAD,CAAR;AAGD,CALM"},"metadata":{},"sourceType":"module"}