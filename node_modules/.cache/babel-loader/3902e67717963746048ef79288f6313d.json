{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { history, fetchWrapper } from \"../helper/history\"; // The auth slice manages Redux state, actions and reducers for authentication.\n// export \n\nexport const authAction = { ...slice.actions,\n  ...extraActions\n};\nexport const authReducer = slice.reducer; // create slice\n\nconst name = \"auth\";\nconst initialState = createInitialState();\nconst reducers = createReducers();\nconst extraActions = createExtraActions();\nconst extraReducers = createExtraReducers();\nconst slice = createSlice({\n  name,\n  initialState,\n  reducers,\n  extraReducers\n}); // implementation\n\nfunction createInitialState() {\n  return {\n    // initialize state from local storage to enable user to stay logged in\n    user: JSON.parse(localStorage.getItem('user')),\n    error: null\n  };\n}\n\nfunction createReducers() {\n  return {\n    logout\n  };\n\n  function logout(state) {\n    state.user = null;\n    localStorage.removeItem('user');\n    history.navigate('/login');\n  }\n}\n\nfunction createExtraActions() {\n  const baseUrl = `${process.env.REACT_APP_API_URL}/api/auth`;\n  return {\n    login: login()\n  };\n\n  function login() {\n    return createAsyncThunk(`${name}/login`, async _ref => {\n      let {\n        username,\n        password\n      } = _ref;\n      return await fetchWrapper.post(`${baseUrl}/login`, {\n        username,\n        password\n      });\n    });\n  }\n}\n\nfunction createExtraReducers() {\n  return { ...login()\n  };\n\n  function login() {\n    var {\n      pending,\n      fulfilled,\n      rejected\n    } = extraActions.login;\n    return {\n      [pending]: state => {\n        state.error = null;\n      },\n      [fulfilled]: (state, action) => {\n        const user = action.payload; // store user details and jwt token in local storage to keep user logged in between page refreshes\n\n        localStorage.setItem('user', JSON.stringify(user));\n        state.user = user; // get return url from location state or default to home page\n\n        const {\n          from\n        } = history.location.state || {\n          from: {\n            pathname: '/'\n          }\n        };\n        history.navigate(from);\n      },\n      [rejected]: (state, action) => {\n        state.error = action.error;\n      }\n    };\n  }\n}","map":{"version":3,"names":["createAsyncThunk","createSlice","history","fetchWrapper","authAction","slice","actions","extraActions","authReducer","reducer","name","initialState","createInitialState","reducers","createReducers","createExtraActions","extraReducers","createExtraReducers","user","JSON","parse","localStorage","getItem","error","logout","state","removeItem","navigate","baseUrl","process","env","REACT_APP_API_URL","login","username","password","post","pending","fulfilled","rejected","action","payload","setItem","stringify","from","location","pathname"],"sources":["D:/Documents/manga-reader-app/manga-reader-frontend/src/app/auth.slice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { history, fetchWrapper } from \"../helper/history\";\r\n\r\n// The auth slice manages Redux state, actions and reducers for authentication.\r\n\r\n// export \r\nexport const authAction = {...slice.actions, ...extraActions}\r\nexport const authReducer = slice.reducer;\r\n\r\n\r\n// create slice\r\nconst name = \"auth\";\r\nconst initialState = createInitialState();\r\nconst reducers = createReducers();\r\nconst extraActions = createExtraActions();\r\nconst extraReducers = createExtraReducers();\r\nconst slice = createSlice({ name, initialState, reducers, extraReducers });\r\n\r\n// implementation\r\n\r\nfunction createInitialState() {\r\n    return {\r\n        // initialize state from local storage to enable user to stay logged in\r\n        user: JSON.parse(localStorage.getItem('user')),\r\n        error: null\r\n    }\r\n}\r\n\r\nfunction createReducers() {\r\n    return {\r\n        logout\r\n    };\r\n\r\n    function logout(state) {\r\n        state.user = null;\r\n        localStorage.removeItem('user');\r\n        history.navigate('/login');\r\n    }\r\n}\r\n\r\nfunction createExtraActions() {\r\n    const baseUrl = `${process.env.REACT_APP_API_URL}/api/auth`;\r\n\r\n    return {\r\n        login: login()\r\n    };    \r\n\r\n    function login() {\r\n        return createAsyncThunk(\r\n            `${name}/login`,\r\n            async ({ username, password }) => await fetchWrapper.post(`${baseUrl}/login`, { username, password })\r\n        );\r\n    }\r\n}\r\n\r\nfunction createExtraReducers() {\r\n    return {\r\n        ...login()\r\n    };\r\n\r\n    function login() {\r\n        var { pending, fulfilled, rejected } = extraActions.login;\r\n        return {\r\n            [pending]: (state) => {\r\n                state.error = null;\r\n            },\r\n            [fulfilled]: (state, action) => {\r\n                const user = action.payload;\r\n                \r\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                localStorage.setItem('user', JSON.stringify(user));\r\n                state.user = user;\r\n\r\n                // get return url from location state or default to home page\r\n                const { from } = history.location.state || { from: { pathname: '/' } };\r\n                history.navigate(from);\r\n            },\r\n            [rejected]: (state, action) => {\r\n                state.error = action.error;\r\n            }\r\n        };\r\n    }\r\n}"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,OAAT,EAAkBC,YAAlB,QAAsC,mBAAtC,C,CAEA;AAEA;;AACA,OAAO,MAAMC,UAAU,GAAG,EAAC,GAAGC,KAAK,CAACC,OAAV;EAAmB,GAAGC;AAAtB,CAAnB;AACP,OAAO,MAAMC,WAAW,GAAGH,KAAK,CAACI,OAA1B,C,CAGP;;AACA,MAAMC,IAAI,GAAG,MAAb;AACA,MAAMC,YAAY,GAAGC,kBAAkB,EAAvC;AACA,MAAMC,QAAQ,GAAGC,cAAc,EAA/B;AACA,MAAMP,YAAY,GAAGQ,kBAAkB,EAAvC;AACA,MAAMC,aAAa,GAAGC,mBAAmB,EAAzC;AACA,MAAMZ,KAAK,GAAGJ,WAAW,CAAC;EAAES,IAAF;EAAQC,YAAR;EAAsBE,QAAtB;EAAgCG;AAAhC,CAAD,CAAzB,C,CAEA;;AAEA,SAASJ,kBAAT,GAA8B;EAC1B,OAAO;IACH;IACAM,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAFH;IAGHC,KAAK,EAAE;EAHJ,CAAP;AAKH;;AAED,SAAST,cAAT,GAA0B;EACtB,OAAO;IACHU;EADG,CAAP;;EAIA,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;IACnBA,KAAK,CAACP,IAAN,GAAa,IAAb;IACAG,YAAY,CAACK,UAAb,CAAwB,MAAxB;IACAxB,OAAO,CAACyB,QAAR,CAAiB,QAAjB;EACH;AACJ;;AAED,SAASZ,kBAAT,GAA8B;EAC1B,MAAMa,OAAO,GAAI,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,WAAjD;EAEA,OAAO;IACHC,KAAK,EAAEA,KAAK;EADT,CAAP;;EAIA,SAASA,KAAT,GAAiB;IACb,OAAOhC,gBAAgB,CAClB,GAAEU,IAAK,QADW,EAEnB;MAAA,IAAO;QAAEuB,QAAF;QAAYC;MAAZ,CAAP;MAAA,OAAkC,MAAM/B,YAAY,CAACgC,IAAb,CAAmB,GAAEP,OAAQ,QAA7B,EAAsC;QAAEK,QAAF;QAAYC;MAAZ,CAAtC,CAAxC;IAAA,CAFmB,CAAvB;EAIH;AACJ;;AAED,SAASjB,mBAAT,GAA+B;EAC3B,OAAO,EACH,GAAGe,KAAK;EADL,CAAP;;EAIA,SAASA,KAAT,GAAiB;IACb,IAAI;MAAEI,OAAF;MAAWC,SAAX;MAAsBC;IAAtB,IAAmC/B,YAAY,CAACyB,KAApD;IACA,OAAO;MACH,CAACI,OAAD,GAAYX,KAAD,IAAW;QAClBA,KAAK,CAACF,KAAN,GAAc,IAAd;MACH,CAHE;MAIH,CAACc,SAAD,GAAa,CAACZ,KAAD,EAAQc,MAAR,KAAmB;QAC5B,MAAMrB,IAAI,GAAGqB,MAAM,CAACC,OAApB,CAD4B,CAG5B;;QACAnB,YAAY,CAACoB,OAAb,CAAqB,MAArB,EAA6BtB,IAAI,CAACuB,SAAL,CAAexB,IAAf,CAA7B;QACAO,KAAK,CAACP,IAAN,GAAaA,IAAb,CAL4B,CAO5B;;QACA,MAAM;UAAEyB;QAAF,IAAWzC,OAAO,CAAC0C,QAAR,CAAiBnB,KAAjB,IAA0B;UAAEkB,IAAI,EAAE;YAAEE,QAAQ,EAAE;UAAZ;QAAR,CAA3C;QACA3C,OAAO,CAACyB,QAAR,CAAiBgB,IAAjB;MACH,CAdE;MAeH,CAACL,QAAD,GAAY,CAACb,KAAD,EAAQc,MAAR,KAAmB;QAC3Bd,KAAK,CAACF,KAAN,GAAcgB,MAAM,CAAChB,KAArB;MACH;IAjBE,CAAP;EAmBH;AACJ"},"metadata":{},"sourceType":"module"}